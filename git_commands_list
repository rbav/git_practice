#Cheatsheet by Nova_tago


				
				##Bash commands
pwd					-> print working directory (shows file path)
ls					-> lists contents in folder
ls -a					-> lists all contents including hidden files
ls -l					-> lists all contents in a long format, as well as file permissions
ls -t					-> orders files and directories by the time they were modified
cat file.txt				-> displays the contents of the file.txt
cp ../file ./				-> copies "file" from up one directory to current directory
co z* ./nope				-> copies all files with a "z" in their anme and moves it to a folder called "nope"
mv ./file ../file2			-> movies "file" up one directory and changes the name to "file2"	
rm nope					-> remove/delete file with name "nope"
rm -r nope				-> remove/delete directory/folder with the name "nope"
cat glaciers.txt > rivers.txt		-> replaces all the text of "rivers.txt" with the text of "glaciers.txt"
cat glaciers.txt >> rivers.txt		-> adds the text of "glaciers.txt" to the file "rivers.txt"
cat volcanoes.txt | wc			-> displays the number of lines, words, and characters from the file "volcanoes.txt"
sort lakes.txt > sorted-lakes.txt	-> sorts alphabetically the contents of the file "lakes" and saves the contents to a new file called "sorted-lakes.txt"
sort deserts.txt | uniq > sorted-d.txt	-> sorts the contents of deserts.txt and removes any duplicates, then saves the contents to a file called "sorted-d.txt"
grep Mount mountains.txt		-> displays any of the contents from the file "mountains.txt" that contains the characters "Mount"
grep -i Mount mountains.txt		-> removes case sensitivity to above grep command






				##git commands
q					-> unstuck cursor/ let me type again key
git branch				-> lists all branches
git branch -D moma			-> deletes branch called “moma”
git checkout master			-> switch to master branch
git branch unordered-list		-> create a branch called “unordered-list”
git checkout unordered-list		-> switch to unordered-list branch
git merge unordered-list		-> merges “unordered-list” branch with master (if in master branch)
git add filename			-> adds the file with the name “filename” to the staging area 
git commit -m “notes”			-> commits the changes to the repository with the notes for the commit from the quotations
git log					-> prints the commits and their notes
git clone remote_location clone_name	-> clones the remote repository and saves it to a local one
git remote -v				-> displays the remote git projects as a list
git fetch				-> easy way to see if changes have been made to the remote repository (does not merge changes)
git add filename			-> takes the files with "filename" and adds it to the staging area
git commit -m "text"			-> commits the changes of all files in the staging area to the current repository with the comments "text" saved for future reference
git push				-> takes all of the committed changes from the local repository and saves to the remote repository 
git push origin <your_branch_name>	-> similar to above but expliciltly mentions which remote repository and local repository are used

